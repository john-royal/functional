/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth.index'
import { Route as GithubInstallImport } from './routes/github.install'
import { Route as AuthCallbackImport } from './routes/auth.callback'
import { Route as LegalTermsImport } from './routes/_legal.terms'
import { Route as LegalPrivacyImport } from './routes/_legal.privacy'
import { Route as AppSettingsImport } from './routes/_app.settings'
import { Route as AppTeamIndexImport } from './routes/_app.$team.index'
import { Route as AppTeamNewImport } from './routes/_app.$team.new'
import { Route as AppTeamProjectImport } from './routes/_app.$team.$project'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const GithubInstallRoute = GithubInstallImport.update({
  id: '/github/install',
  path: '/github/install',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

const LegalTermsRoute = LegalTermsImport.update({
  id: '/_legal/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const LegalPrivacyRoute = LegalPrivacyImport.update({
  id: '/_legal/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)

const AppTeamIndexRoute = AppTeamIndexImport.update({
  id: '/$team/',
  path: '/$team/',
  getParentRoute: () => AppRoute,
} as any)

const AppTeamNewRoute = AppTeamNewImport.update({
  id: '/$team/new',
  path: '/$team/new',
  getParentRoute: () => AppRoute,
} as any)

const AppTeamProjectRoute = AppTeamProjectImport.update({
  id: '/$team/$project',
  path: '/$team/$project',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppImport
    }
    '/_legal/privacy': {
      id: '/_legal/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof LegalPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/_legal/terms': {
      id: '/_legal/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof LegalTermsImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/github/install': {
      id: '/github/install'
      path: '/github/install'
      fullPath: '/github/install'
      preLoaderRoute: typeof GithubInstallImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_app/$team/$project': {
      id: '/_app/$team/$project'
      path: '/$team/$project'
      fullPath: '/$team/$project'
      preLoaderRoute: typeof AppTeamProjectImport
      parentRoute: typeof AppImport
    }
    '/_app/$team/new': {
      id: '/_app/$team/new'
      path: '/$team/new'
      fullPath: '/$team/new'
      preLoaderRoute: typeof AppTeamNewImport
      parentRoute: typeof AppImport
    }
    '/_app/$team/': {
      id: '/_app/$team/'
      path: '/$team'
      fullPath: '/$team'
      preLoaderRoute: typeof AppTeamIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppSettingsRoute: typeof AppSettingsRoute
  AppTeamProjectRoute: typeof AppTeamProjectRoute
  AppTeamNewRoute: typeof AppTeamNewRoute
  AppTeamIndexRoute: typeof AppTeamIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppSettingsRoute: AppSettingsRoute,
  AppTeamProjectRoute: AppTeamProjectRoute,
  AppTeamNewRoute: AppTeamNewRoute,
  AppTeamIndexRoute: AppTeamIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/settings': typeof AppSettingsRoute
  '/privacy': typeof LegalPrivacyRoute
  '/terms': typeof LegalTermsRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/github/install': typeof GithubInstallRoute
  '/auth': typeof AuthIndexRoute
  '/$team/$project': typeof AppTeamProjectRoute
  '/$team/new': typeof AppTeamNewRoute
  '/$team': typeof AppTeamIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/settings': typeof AppSettingsRoute
  '/privacy': typeof LegalPrivacyRoute
  '/terms': typeof LegalTermsRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/github/install': typeof GithubInstallRoute
  '/auth': typeof AuthIndexRoute
  '/$team/$project': typeof AppTeamProjectRoute
  '/$team/new': typeof AppTeamNewRoute
  '/$team': typeof AppTeamIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/settings': typeof AppSettingsRoute
  '/_legal/privacy': typeof LegalPrivacyRoute
  '/_legal/terms': typeof LegalTermsRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/github/install': typeof GithubInstallRoute
  '/auth/': typeof AuthIndexRoute
  '/_app/$team/$project': typeof AppTeamProjectRoute
  '/_app/$team/new': typeof AppTeamNewRoute
  '/_app/$team/': typeof AppTeamIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/settings'
    | '/privacy'
    | '/terms'
    | '/auth/callback'
    | '/github/install'
    | '/auth'
    | '/$team/$project'
    | '/$team/new'
    | '/$team'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/settings'
    | '/privacy'
    | '/terms'
    | '/auth/callback'
    | '/github/install'
    | '/auth'
    | '/$team/$project'
    | '/$team/new'
    | '/$team'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/settings'
    | '/_legal/privacy'
    | '/_legal/terms'
    | '/auth/callback'
    | '/github/install'
    | '/auth/'
    | '/_app/$team/$project'
    | '/_app/$team/new'
    | '/_app/$team/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LegalPrivacyRoute: typeof LegalPrivacyRoute
  LegalTermsRoute: typeof LegalTermsRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  GithubInstallRoute: typeof GithubInstallRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LegalPrivacyRoute: LegalPrivacyRoute,
  LegalTermsRoute: LegalTermsRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  GithubInstallRoute: GithubInstallRoute,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/_legal/privacy",
        "/_legal/terms",
        "/auth/callback",
        "/github/install",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/settings",
        "/_app/$team/$project",
        "/_app/$team/new",
        "/_app/$team/"
      ]
    },
    "/_app/settings": {
      "filePath": "_app.settings.tsx",
      "parent": "/_app"
    },
    "/_legal/privacy": {
      "filePath": "_legal.privacy.tsx"
    },
    "/_legal/terms": {
      "filePath": "_legal.terms.tsx"
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    },
    "/github/install": {
      "filePath": "github.install.tsx"
    },
    "/auth/": {
      "filePath": "auth.index.tsx"
    },
    "/_app/$team/$project": {
      "filePath": "_app.$team.$project.tsx",
      "parent": "/_app"
    },
    "/_app/$team/new": {
      "filePath": "_app.$team.new.tsx",
      "parent": "/_app"
    },
    "/_app/$team/": {
      "filePath": "_app.$team.index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
