/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AuthIndexImport } from './routes/auth.index'
import { Route as AuthCallbackImport } from './routes/auth.callback'
import { Route as AppTeamImport } from './routes/_app.$team'
import { Route as AppTeamProjectImport } from './routes/_app.$team.$project'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

const AppTeamRoute = AppTeamImport.update({
  id: '/$team',
  path: '/$team',
  getParentRoute: () => AppRoute,
} as any)

const AppTeamProjectRoute = AppTeamProjectImport.update({
  id: '/$project',
  path: '/$project',
  getParentRoute: () => AppTeamRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/$team': {
      id: '/_app/$team'
      path: '/$team'
      fullPath: '/$team'
      preLoaderRoute: typeof AppTeamImport
      parentRoute: typeof AppImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/_app/$team/$project': {
      id: '/_app/$team/$project'
      path: '/$project'
      fullPath: '/$team/$project'
      preLoaderRoute: typeof AppTeamProjectImport
      parentRoute: typeof AppTeamImport
    }
  }
}

// Create and export the route tree

interface AppTeamRouteChildren {
  AppTeamProjectRoute: typeof AppTeamProjectRoute
}

const AppTeamRouteChildren: AppTeamRouteChildren = {
  AppTeamProjectRoute: AppTeamProjectRoute,
}

const AppTeamRouteWithChildren =
  AppTeamRoute._addFileChildren(AppTeamRouteChildren)

interface AppRouteChildren {
  AppTeamRoute: typeof AppTeamRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppTeamRoute: AppTeamRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/$team': typeof AppTeamRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/auth': typeof AuthIndexRoute
  '/$team/$project': typeof AppTeamProjectRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/$team': typeof AppTeamRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/auth': typeof AuthIndexRoute
  '/$team/$project': typeof AppTeamProjectRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/$team': typeof AppTeamRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/': typeof AuthIndexRoute
  '/_app/$team/$project': typeof AppTeamProjectRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/$team'
    | '/auth/callback'
    | '/auth'
    | '/$team/$project'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/$team' | '/auth/callback' | '/auth' | '/$team/$project'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/$team'
    | '/auth/callback'
    | '/auth/'
    | '/_app/$team/$project'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/auth/callback",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/$team"
      ]
    },
    "/_app/$team": {
      "filePath": "_app.$team.tsx",
      "parent": "/_app",
      "children": [
        "/_app/$team/$project"
      ]
    },
    "/auth/callback": {
      "filePath": "auth.callback.tsx"
    },
    "/auth/": {
      "filePath": "auth.index.tsx"
    },
    "/_app/$team/$project": {
      "filePath": "_app.$team.$project.tsx",
      "parent": "/_app/$team"
    }
  }
}
ROUTE_MANIFEST_END */
